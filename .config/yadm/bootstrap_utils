#!/usr/bin/env bash

if [ "${1}" == "--load" ]; then
  export __SYSTEM_TYPE
  __SYSTEM_TYPE=$(uname -s)

  export __WSL_MODE
  if grep -qi Microsoft /proc/version; then
    __WSL_MODE=true
  else
    __WSL_MODE=false
  fi

  function __log_error () {
    tput bold
    tput setaf 9 # for red
    echo "$1"
    tput sgr0
  }

  function __log_debug () {
    tput setaf 3 # for yellow
    echo "$1"
    tput sgr0
  }

  function __log_info () {
    tput bold
    tput setaf 2 # for green
    echo "$1"
    tput sgr0
  }

  function __load_module () {
    __log_info "loading module: $1"

    # source $(root_dir")/bootstrap_modules/module_name.sh {grab stderr too} and
    #  pipe it to awk in order to modify it's output (std{out|err}) and prepend it with a tab character
    . "$(dirname "${BASH_SOURCE[0]}")/bootstrap_modules/$1".sh 2>&1 | awk '{print "\t"$0}'
  }

  # loading them automatically is possible and easy to implement as demonstrated below but
  # it's better to explicitly call them; this way you can disable files, or have more
  # control over their order without prepending the filenames with numbers.
  function __load_modules () {
    for f in "$(dirname "${BASH_SOURCE[0]}")/bootstrap_modules/"/*; do
      module_name=$(basename -s .sh "$f")
      __load_module "$module_name"
    done
  }

  __log_info 'loaded bootstrap utils'
elif [ "${1}" == "--unload" ]; then
    tput bold
    tput setaf 2 # for green
    echo "unloaded bootstrap utils"
    tput sgr0

  # time to clean up after ourselves
  # it's not needed but extra hygine never hurt anyone (famous last words)
  # but regardless, this can possibly be used in the future as a hook of some
  # sort of a "lifecycle event"
  unset -f __log_error __log_debug __log_info __load_module __load_modules
  unset -f __SYSTEM_TYPE __WSL_MODE __modules_path
else
  tput bold
  tput setaf 9 # for red
  echo "You need to either call this script with --load or --unload"
  tput sgr0
fi
